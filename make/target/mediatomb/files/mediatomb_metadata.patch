=== modified file 'src/metadata/ffmpeg_handler.cc'
--- old/src/metadata/ffmpeg_handler.cc	2012-06-24 22:48:30.330405091 +0200
+++ new/src/metadata/ffmpeg_handler.cc	2012-06-24 22:51:55.774405091 +0200
@@ -88,7 +88,33 @@
 {
 
 	Ref<StringConverter> sc = StringConverter::m2i();
-    
+	/* Tabs are 4 characters here */
+	typedef struct {const char *avname; metadata_fields_t field;} mapping_t;
+	static const mapping_t mapping[] =
+	{
+		{"title",   M_TITLE},
+		{"artist",  M_ARTIST},
+		{"album",   M_ALBUM},
+		{"date",    M_DATE},
+		{"genre",   M_GENRE},
+		{"comment", M_DESCRIPTION},
+		{"track",   M_TRACKNUMBER},
+		{NULL,      M_MAX},
+	};
+
+	if (!pFormatCtx->metadata)
+		return;
+	for (const mapping_t *m = mapping; m->avname != NULL; m++)
+	{ /*
+		AVMetadataTag *tag = NULL;
+		tag = av_metadata_get(pFormatCtx->metadata, m->avname, NULL, 0);
+		if (tag && tag->value && tag->value[0])
+		{
+			log_debug("Added metadata %s: %s\n", m->avname, tag->value);
+			item->setMetadata(MT_KEYS[m->field].upnp, sc->convert(tag->value));
+		}*/
+	}
+	/* Old algorithm (doesn't work with libav >= 0.7)
 	if (strlen(pFormatCtx->title) > 0) 
     {
 	    log_debug("Added metadata title: %s\n", pFormatCtx->title);
@@ -131,6 +157,7 @@
         item->setMetadata(MT_KEYS[M_TRACKNUMBER].upnp, 
                           sc->convert(String::from(pFormatCtx->track)));
 	}
+	*/
 }
 
 // ffmpeg library calls
@@ -178,7 +205,7 @@
 	for(i=0; i<pFormatCtx->nb_streams; i++) 
     {
 		AVStream *st = pFormatCtx->streams[i];
-		if((st != NULL) && (videoset == false) && (st->codec->codec_type == CODEC_TYPE_VIDEO))
+		if((st != NULL) && (videoset == false) && (st->codec->codec_type == AVMEDIA_TYPE_VIDEO))
         {
             if (st->codec->codec_tag > 0)
             {
@@ -209,7 +236,7 @@
                 *y = st->codec->height;
 			}
 		} 
-		if(st->codec->codec_type == CODEC_TYPE_AUDIO) 
+		if(st->codec->codec_type == AVMEDIA_TYPE_AUDIO) 
         {
 			// Increase number of audiochannels
 			audioch++;
@@ -258,7 +285,7 @@
 	
 	// Register all formats and codecs
     av_register_all();
-
+/*
     // Open video file
     if (av_open_input_file(&pFormatCtx, 
                           item->getLocation().c_str(), NULL, 0, NULL) != 0)
@@ -276,7 +303,7 @@
 	addFfmpegResourceFields(item, pFormatCtx, &x, &y);
 	
     // Close the video file
-    av_close_input_file(pFormatCtx);
+    av_close_input_file(pFormatCtx);*/
 }
 
 Ref<IOHandler> FfmpegHandler::serveContent(Ref<CdsItem> item, int resNum, off_t *data_size)

--- old/src/hash/dbr_hash.h.orig	2013-09-21 09:16:26.000000000 +0000
+++ new/src/hash/dbr_hash.h	2013-09-21 09:20:41.000000000 +0000
@@ -124,7 +124,7 @@
     inline bool remove(KT key)
     {
         struct dbr_hash_slot<KT> *slot;
-        if (! search(key, &slot))
+        if (! this->search(key, &slot))
             return false;
         slot->key = deletedKey;
         int array_slot = slot->array_slot;
@@ -134,7 +134,7 @@
             return true;
         }
         data_array[array_slot] = data_array[--this->count];
-        if (! search(data_array[array_slot], &slot))
+        if (! this->search(data_array[array_slot], &slot))
         {
             log_debug("DBR-Hash-Error: (%d; array_slot=%d; count=%d)\n", data_array[array_slot], array_slot, this->count);
             throw zmm::Exception(_("DBR-Hash-Error: key in data_array not found in hashtable"));
@@ -146,7 +146,7 @@
     inline void put(KT key)
     {
         struct dbr_hash_slot<KT> *slot;
-        if (! search(key, &slot))
+        if (! this->search(key, &slot))
         {
 #ifdef TOMBDEBUG
             if (this->count >= realCapacity)
@@ -194,7 +194,7 @@
     inline bool exists(KT key)
     {
         struct dbr_hash_slot<KT> *slot;
-        return search(key, &slot);
+        return this->search(key, &slot);
     }
     
     /*
@@ -202,7 +202,7 @@
      
     inline bool exists(KT key, hash_slot_t *destSlot)
     {
-        return search(key, (KT **)destSlot);
+        return this->search(key, (KT **)destSlot);
     }
     */
 };
--- old/src/hash/dbo_hash.h.orig	2013-09-21 09:23:08.000000000 +0000
+++ new/src/hash/dbo_hash.h	2013-09-21 09:23:26.000000000 +0000
@@ -106,7 +106,7 @@
     inline bool remove(KT key)
     {
         struct dbo_hash_slot<KT, VT> *slot;
-        if (! search(key, &slot))
+        if (! this->search(key, &slot))
             return false;
         slot->key = deletedKey;
         slot->value->release();
@@ -136,7 +136,7 @@
     inline void put(KT key, zmm::Ref<VT> value)
     {
         struct dbo_hash_slot<KT, VT> *slot;
-        search(key, &slot);
+        this->search(key, &slot);
         put(key, (hash_slot_t)slot, value);
     }
     void put(KT key, hash_slot_t destSlot, zmm::Ref<VT> value)
@@ -162,7 +162,7 @@
     inline zmm::Ref<VT> get(KT key)
     {
         struct dbo_hash_slot<KT, VT> *slot;
-        bool found = search(key, &slot);
+        bool found = this->search(key, &slot);
         if (found)
             return zmm::Ref<VT>(slot->value);
         else
@@ -174,7 +174,7 @@
     inline zmm::Ref<VT> get(KT key, hash_slot_t *destSlot)
     {
         struct dbo_hash_slot<KT, VT> **slot = (struct dbo_hash_slot<KT, VT> **)destSlot;
-        bool found = search(key, slot);
+        bool found = this->search(key, slot);
         if (found)
             return zmm::Ref<VT>((*slot)->value);
         else
--- old/src/hash/dso_hash.h.orig	2013-09-21 09:25:09.000000000 +0000
+++ new/src/hash/dso_hash.h	2013-09-21 09:25:27.000000000 +0000
@@ -100,7 +100,7 @@
     inline bool remove(zmm::String key)
     {
         struct dso_hash_slot<VT> *slot;
-        if (! search(key, &slot))
+        if (! this->search(key, &slot))
             return false;
         slot->key->release();
         slot->value->release();
@@ -112,7 +112,7 @@
     inline void put(zmm::String key, zmm::Ref<VT> value)
     {
         struct dso_hash_slot<VT> *slot;
-        search(key, &slot);
+        this->search(key, &slot);
         put(key, (hash_slot_t)slot, value);
     }
     void put(zmm::String key, hash_slot_t destSlot, zmm::Ref<VT> value)
@@ -141,7 +141,7 @@
     inline zmm::Ref<VT> get(zmm::String key)
     {
         struct dso_hash_slot<VT> *slot;
-        bool found = search(key, &slot);
+        bool found = this->search(key, &slot);
         if (found)
             return zmm::Ref<VT>(slot->value);
         else
@@ -153,7 +153,7 @@
     inline zmm::Ref<VT> get(zmm::String key, hash_slot_t *destSlot)
     {
         struct dso_hash_slot<VT> **slot = (struct dso_hash_slot<VT> **)destSlot;
-        bool found = search(key, slot);
+        bool found = this->search(key, slot);
         if (found)
             return zmm::Ref<VT>((*slot)->value);
         else
--- old/tombupnp/upnp/src/genlib/net/http/webserver.c.orig	2013-09-30 04:20:49.000000000 +0000
+++ new/tombupnp/upnp/src/genlib/net/http/webserver.c	2013-09-30 04:21:45.000000000 +0000
@@ -310,7 +310,7 @@
 *	 0 - On Sucess														
 *	 UPNP_E_OUTOF_MEMORY - on memory allocation failures				
 ************************************************************************/
-XINLINE int
+static XINLINE int
 get_content_type( IN const char *filename,
                   OUT DOMString * content_type )
 {