--- a/main.c.orig	2015-12-13 11:08:22.101489624 +0200
+++ b/main.c	2015-12-13 11:52:15.854549701 +0200
@@ -37,10 +37,48 @@
 #include <sys/mman.h>
 #include <linux/types.h>
 #include <linux/fb.h>
+#include <bpamem.h>
 
 #include "png.h"
 #include "jpeglib.h"
 
+#define OUT(x) \
+	out[OUTITER]=(unsigned char)*(decode_surface + x)&0xFF; \
+	OUTITER+=OUTINC;
+
+#define OUT4(x) \
+	OUT(x + 0x03); \
+	OUT(x + 0x02); \
+	OUT(x + 0x01); \
+	OUT(x + 0x00);
+
+#define OUT8(x) \
+	OUT4(x + 0x04); \
+	OUT4(x + 0x00);
+
+#define OUT_LU_16A(x) \
+	OUT8(x); \
+	OUT8(x + 0x40);
+
+#define OUT_CH_8A(x) \
+	OUT4(x); \
+	OUT4(x + 0x20);
+
+//pppppppppppppppp
+//x: macroblock address
+//l: line 0-15
+#define OUT_LU_16(x,l) \
+	OUT_LU_16A(x + (l/4) * 0x10 + (l%2) * 0x80 + ((l/2)%2?0x00:0x08));
+
+//pppppppp
+//x: macroblock address
+//l: line 0-7
+//b: 0=cr 1=cb
+#define OUT_CH_8(x,l,b) \
+	OUT_CH_8A(x + (l/4) * 0x10 + (l%2) * 0x40 + ((l/2)%2?0x00:0x08) + (b?0x04:0x00));
+
+//----
+
 #define CLAMP(x)    ((x < 0) ? 0 : ((x > 255) ? 255 : x))
 #define SWAP(x,y)	{ x ^= y; y ^= x; x ^= y; }
 
@@ -83,7 +121,7 @@
 void (*resize)(const unsigned char *source, unsigned char *dest, int xsource, int ysource, int xdest, int ydest, int colors);
 void combine(unsigned char *output, const unsigned char *video, const unsigned char *osd, int vleft, int vtop, int vwidth, int vheight, int xres, int yres);
 
-static enum {UNKNOWN, PALLAS, VULCAN, XILLEON, BRCM7366ARM, BRCM7400, BRCM7401, BRCM7405, BRCM7325, BRCM7335, BRCM7358, BRCM7362, BRCM7241, BRCM7346, BRCM7356, BRCM7424, BRCM7425, BRCM7435, BRCM7552} stb_type = UNKNOWN;
+//static enum {UNKNOWN, PALLAS, VULCAN, XILLEON, BRCM7366ARM, BRCM7400, BRCM7401, BRCM7405, BRCM7325, BRCM7335, BRCM7358, BRCM7362, BRCM7241, BRCM7346, BRCM7356, BRCM7424, BRCM7425, BRCM7435, BRCM7552} stb_type = UNKNOWN;
 
 static int chr_luma_stride = 0x40;
 static int chr_luma_register_offset = 0;
@@ -112,6 +150,7 @@
 
 	const char* filename = "/tmp/screenshot.bmp";
 
+#if 0
 	// detect STB
 	char buf[256];
 	FILE *fp = fopen("/proc/fb","r");
@@ -339,6 +378,7 @@
 		default:
 			break;
 	}
+#endif
 
 	// process command line
 	while ((c = getopt (argc, argv, "dhj:lbnopqr:sv")) != -1)
@@ -421,14 +461,17 @@
 
 	int mallocsize=1920*1080;
 
+#if 0
 	if (stb_type == VULCAN || stb_type == PALLAS)
 		mallocsize=720*576;
-
+#endif
 	video = (unsigned char *)malloc(mallocsize*3);
 	osd = (unsigned char *)malloc(mallocsize*4);
 
+#if 0
 	if ((stb_type == VULCAN || stb_type == PALLAS) && width > 720)
 		mallocsize=width*(width * 0.8 + 1);
+#endif
 
 	output = (unsigned char *)malloc(mallocsize*4);
 
@@ -444,6 +487,7 @@
 		getvideo(video,&xres_v,&yres_v);
 	}
 
+#if 0
 	// get aspect ratio
 	if (stb_type == VULCAN || stb_type == PALLAS)
 	{
@@ -458,6 +502,10 @@
 	else
 	{
 		fp = fopen("/proc/stb/vmpeg/0/aspect", "r");
+#endif
+		char buf[256];
+
+		FILE *fp = fopen("/proc/stb/vmpeg/0/aspect", "r");
 		if (fp)
 		{
 			while (fgets(buf,sizeof(buf), fp))
@@ -494,7 +542,10 @@
 		}
 		if (dst_width == 720) dst_width = 0;
 		if (dst_height == 576) dst_height = 0;
+
+#if 0
 	}
+#endif
 
 	// resizing
  	if (video_only)
@@ -776,7 +827,16 @@
 	int stride = 0;
 	FILE *fp;
 	char buf[256];
-
+	int yblock, xblock, iyblock, ixblock, yblockoffset, offset, layer_offset, OUTITER, OUTINC, OUTITERoffset;
+	int stride_half;
+	unsigned char *out = NULL;
+	unsigned char even, cr;
+	int fd_bpa;
+	BPAMemMapMemData bpa_data;
+	char bpa_mem_device[30];
+	char *decode_surface;
+	int delay;
+#if 0
 	if (stb_type == BRCM7366ARM)
 	{
 		int fd_video = open("/dev/dvb/adapter0/video0", O_RDONLY);
@@ -792,13 +852,226 @@
 		*yres = 1080;
 		return;
 	}
-
+#endif
 	if ((mem_fd = open("/dev/mem", O_RDWR|O_SYNC) ) < 0)
 	{
 		fprintf(stderr, "Mainmemory: can't open /dev/mem \n");
 		return;
 	}
 
+	fp = fopen("/proc/stb/vmpeg/0/xres", "r");
+	if (fp)
+	{
+		while (fgets(buf,sizeof(buf), fp))
+		{
+			sscanf(buf,"%x",&stride);
+		}
+		fclose(fp);
+	}
+
+	fp = fopen("/proc/stb/vmpeg/0/yres", "r");
+	if (fp)
+	{
+		while (fgets(buf,sizeof(buf), fp))
+		{
+			sscanf(buf,"%x",&res);
+		}
+	fclose(fp);
+	}
+
+	//if stride and res is zero than this is most probably a stillpicture
+	if(stride == 0) stride = 1280;
+	if(res == 0) res = 720;
+		stride_half = stride / 2;
+
+	luma   = (unsigned char *)malloc(stride * res);
+	chroma = (unsigned char *)malloc(stride * res / 2);
+
+	memset(chroma, 0x80, stride * res / 2);
+	
+	if((fd_bpa = open("/dev/bpamem0", O_RDWR)) < 0)
+	{
+		fprintf(stderr, "cannot access /dev/bpamem0! err = %d\n", fd_bpa);
+		return;
+	}
+	
+	bpa_data.bpa_part  = "LMI_VID";
+	bpa_data.phys_addr = 0x00000000;
+	bpa_data.mem_size = 0;
+
+	fp = fopen("/proc/bpa2", "r");
+	if (fp)
+	{
+		unsigned char found_part = 0;
+		unsigned long mem_size = 0;
+		unsigned long phys_addr = 0;
+		while (fgets(buf,sizeof(buf), fp))
+		{
+			if(found_part || strstr(buf, bpa_data.bpa_part) != NULL)
+			{
+				found_part = 1;
+				if (sscanf(buf, "- %lu B at %lx", &mem_size, &phys_addr) == 2)
+				{
+					if(mem_size > bpa_data.mem_size)
+					{
+						bpa_data.mem_size  = mem_size;
+						bpa_data.phys_addr = phys_addr;
+					}
+				}
+			}
+		}
+		fclose(fp);
+	}
+
+	printf("Using bpa2 part %s - 0x%lx %lu\n", bpa_data.bpa_part, bpa_data.phys_addr, bpa_data.mem_size);
+
+	//bpa_data.phys_addr = 0x4a824000;
+	//bpa_data.mem_size = 28311552;
+	
+	if(ioctl(fd_bpa, BPAMEMIO_MAPMEM, &bpa_data) == -1) // request memory from bpamem
+	{
+		fprintf(stderr, "cannot map required mem\n");
+		return;
+	}
+	
+	sprintf(bpa_mem_device, "/dev/bpamem%d", bpa_data.device_num);
+	close(fd_bpa);
+	
+	// if somebody forgot to add all bpamem devs then this gets really bad here
+	if((fd_bpa = open(bpa_mem_device, O_RDWR)) < 0)
+	{
+		fprintf(stderr, "cannot access %s! err = %d\n", bpa_mem_device, fd_bpa);
+		return;
+	}
+	
+	decode_surface = (char *)mmap(0, bpa_data.mem_size, PROT_WRITE|PROT_READ, MAP_SHARED, fd_bpa, 0);
+	
+	if(decode_surface == MAP_FAILED) 
+	{
+		fprintf(stderr, "could not map bpa mem");
+		close(fd_bpa);
+		return;
+	}
+
+	//luma
+	layer_offset = 0;
+		
+	//we do not have to round that every luma res will be a multiple of 16
+	yblock = res/16; //45
+	xblock = stride/16; //80
+	
+	//thereby yblockoffset does also not to be rounded up
+	yblockoffset = xblock * 256/*16x16px*/ * 2/*2 block rows*/; //0xA000 for 1280
+		
+	//printf("yblock: %u xblock:%u yblockoffset:0x%x\n", yblock, xblock, yblockoffset);
+		
+	OUTITER       = 0;
+	OUTITERoffset = 0;
+	OUTINC        = 1; /*no spaces between pixel*/
+	out           = luma;
+		
+	//wait_for_frame_sync
+	{
+		unsigned char old_frame[0x800]; /*first 2 luma blocks, 0:0 - 32:64*/
+		memcpy(old_frame, decode_surface, 0x800);
+		for(delay = 0; delay < 500/*ms*/; delay++)
+		{
+			if (memcmp(decode_surface, old_frame, 0x800) != 0)
+				break;
+			usleep(100);
+		}
+	}
+	//printf("framesync after %dms\n", delay);
+		
+	//now we have 16,6ms(60hz) to 50ms(20hz) to get the whole picture
+	for(even = 0; even < 2; even++)
+	{
+		offset        = layer_offset + (even  << 8 /* * 0x100*/);
+		OUTITERoffset = even * xblock << 8 /* * 256=16x16px*/;
+			
+		for (iyblock = even; iyblock < yblock; iyblock+=2)
+		{
+			for (ixblock = 0; ixblock < xblock; ixblock++)
+			{
+				int line; 
+					
+				OUTITER = OUTITERoffset;
+				for (line = 0; line < 16; line++)
+				{
+					OUT_LU_16(offset, line);
+					OUTITER += (stride - 16 /*we have already incremented by 16*/);
+				}
+				
+				//0x00, 0x200, ...
+				offset += 0x200;
+				OUTITERoffset += 16;
+			}
+			OUTITERoffset += (stride << 5) - stride /* * 31*/;
+		}
+	}
+		
+	//chroma
+	layer_offset = ((stride*res + (yblockoffset >> 1 /* /2*/ /*round up*/)) / yblockoffset) * yblockoffset;
+
+	//cb
+	//we do not have to round that every chroma y res will be a multiple of 16 
+	//and every chroma x res /2 will be a multiple of 8
+	yblock = res >> 4 /* /16*/; //45
+	xblock = stride_half >> 3 /* /8*/; //no roundin
+		
+	//if xblock is not even than we will have to move to the next even value an 
+	yblockoffset = (((xblock + 1) >> 1 /* / 2*/) << 1 /* * 2*/ ) << 8 /* * 64=8x8px * 2=2 block rows * 2=cr cb*/; 
+		
+	//printf("yblock: %u xblock:%u yblockoffset:0x%x\n", yblock, xblock, yblockoffset);
+		
+	OUTITER       = 0;
+	OUTITERoffset = 0;
+	OUTINC        = 2;
+	out           = chroma;
+		
+	for(cr = 0; cr < 2; cr++)
+	{
+		for(even = 0; even < 2; even++)
+		{
+			offset        = layer_offset + (even  << 8 /* * 0x100*/);
+			OUTITERoffset = even * (xblock << 7 /* * 128=8x8px * 2*/) + cr;
+
+			for (iyblock = even; iyblock < yblock; iyblock+=2)
+			{
+				for (ixblock = 0; ixblock < xblock; ixblock++)
+				{
+					int line; 
+					OUTITER = OUTITERoffset;
+						
+					for (line = 0; line < 8; line++)
+					{
+						OUT_CH_8(offset, line, !cr);
+						OUTITER += (stride - 16 /*we have already incremented by OUTINC*8=16*/);
+					}
+					
+					//0x00 0x80 0x200 0x280, ...
+					offset += (offset%0x100?0x180/*80->200*/:0x80/*0->80*/);
+					OUTITERoffset += 16/*OUTINC*8=16*/;
+				}
+				OUTITERoffset += (stride << 4) - stride /* * 15*/;
+			}
+		}
+	}
+
+	printf("framesync after %dms\n", delay);
+
+	munmap(decode_surface, bpa_data.mem_size);
+
+	if(ioctl(fd_bpa, BPAMEMIO_UNMAPMEM) == -1) // request memory from bpamem
+	{
+		fprintf(stderr, "cannot unmap required mem\n");
+		close(fd_bpa);
+		return;
+	}
+
+	close(fd_bpa);
+
+#if 0
 	if (stb_type > XILLEON)
 	{
 		// grab bcm pic from decoder memory
@@ -1162,6 +1435,7 @@
 
 		free(memory_tmp);
 	}
+#endif
 
 	close(mem_fd);
 
@@ -1187,22 +1461,26 @@
 			int GV=yuv2rgbtable_gv[V];
 			int BV=yuv2rgbtable_bv[V];
 
+#if 0
 			switch (stb_type) //on xilleon we use bgr instead of rgb so simply swap the coeffs
 			{
 				case XILLEON:
 					SWAP(RU,BV);
 					break;
 			}
+#endif
 
 			// now we do 4 pixels on each iteration this is more code but much faster
 			int Y=yuv2rgbtable_y[luma[pos]];
 
+			//p0:0
 			video[out1]=CLAMP((Y + RU)>>16);
 			video[out1+1]=CLAMP((Y - GV - GU)>>16);
 			video[out1+2]=CLAMP((Y + BV)>>16);
 
 			Y=yuv2rgbtable_y[luma[stride+pos]];
 
+			//p1:0
 			video[out1+rgbstride]=CLAMP((Y + RU)>>16);
 			video[out1+1+rgbstride]=CLAMP((Y - GV - GU)>>16);
 			video[out1+2+rgbstride]=CLAMP((Y + BV)>>16);
@@ -1212,12 +1490,14 @@
 
 			Y=yuv2rgbtable_y[luma[pos]];
 
+			//p0:1
 			video[out1]=CLAMP((Y + RU)>>16);
 			video[out1+1]=CLAMP((Y - GV - GU)>>16);
 			video[out1+2]=CLAMP((Y + BV)>>16);
 
 			Y=yuv2rgbtable_y[luma[stride+pos]];
 
+			//p1:1
 			video[out1+rgbstride]=CLAMP((Y + RU)>>16);
 			video[out1+1+rgbstride]=CLAMP((Y - GV - GU)>>16);
 			video[out1+2+rgbstride]=CLAMP((Y + BV)>>16);
@@ -1340,6 +1620,7 @@
 			return;
 		}
 
+#if 0
 		if (stb_type == VULCAN) // DM500/5620 stores the colors as a 16bit word with yuv values, so we have to convert :(
 		{
 			unsigned short yuv;
@@ -1380,6 +1661,7 @@
 			fprintf(stderr, "unsupported framebuffermode\n");
 			return;
 		}
+#endif
 		close(mem_fd);
 
 		// get 8bit framebuffer
